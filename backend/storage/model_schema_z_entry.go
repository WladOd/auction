/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaZEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaZEntry{}

// SchemaZEntry struct for SchemaZEntry
type SchemaZEntry struct {
	// Name of the sorted set
	Set *string `json:"set,omitempty"`
	// Referenced key
	Key *string `json:"key,omitempty"`
	Entry *SchemaEntry `json:"entry,omitempty"`
	// Sorted set element's score
	Score *float64 `json:"score,omitempty"`
	// At which transaction the key is bound 0 if reference is not bound and should read the most recent reference
	AtTx *string `json:"atTx,omitempty"`
}

// NewSchemaZEntry instantiates a new SchemaZEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaZEntry() *SchemaZEntry {
	this := SchemaZEntry{}
	return &this
}

// NewSchemaZEntryWithDefaults instantiates a new SchemaZEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaZEntryWithDefaults() *SchemaZEntry {
	this := SchemaZEntry{}
	return &this
}

// GetSet returns the Set field value if set, zero value otherwise.
func (o *SchemaZEntry) GetSet() string {
	if o == nil || IsNil(o.Set) {
		var ret string
		return ret
	}
	return *o.Set
}

// GetSetOk returns a tuple with the Set field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaZEntry) GetSetOk() (*string, bool) {
	if o == nil || IsNil(o.Set) {
		return nil, false
	}
	return o.Set, true
}

// HasSet returns a boolean if a field has been set.
func (o *SchemaZEntry) HasSet() bool {
	if o != nil && !IsNil(o.Set) {
		return true
	}

	return false
}

// SetSet gets a reference to the given string and assigns it to the Set field.
func (o *SchemaZEntry) SetSet(v string) {
	o.Set = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SchemaZEntry) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaZEntry) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SchemaZEntry) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SchemaZEntry) SetKey(v string) {
	o.Key = &v
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *SchemaZEntry) GetEntry() SchemaEntry {
	if o == nil || IsNil(o.Entry) {
		var ret SchemaEntry
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaZEntry) GetEntryOk() (*SchemaEntry, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *SchemaZEntry) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given SchemaEntry and assigns it to the Entry field.
func (o *SchemaZEntry) SetEntry(v SchemaEntry) {
	o.Entry = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *SchemaZEntry) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaZEntry) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *SchemaZEntry) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *SchemaZEntry) SetScore(v float64) {
	o.Score = &v
}

// GetAtTx returns the AtTx field value if set, zero value otherwise.
func (o *SchemaZEntry) GetAtTx() string {
	if o == nil || IsNil(o.AtTx) {
		var ret string
		return ret
	}
	return *o.AtTx
}

// GetAtTxOk returns a tuple with the AtTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaZEntry) GetAtTxOk() (*string, bool) {
	if o == nil || IsNil(o.AtTx) {
		return nil, false
	}
	return o.AtTx, true
}

// HasAtTx returns a boolean if a field has been set.
func (o *SchemaZEntry) HasAtTx() bool {
	if o != nil && !IsNil(o.AtTx) {
		return true
	}

	return false
}

// SetAtTx gets a reference to the given string and assigns it to the AtTx field.
func (o *SchemaZEntry) SetAtTx(v string) {
	o.AtTx = &v
}

func (o SchemaZEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaZEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Set) {
		toSerialize["set"] = o.Set
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.AtTx) {
		toSerialize["atTx"] = o.AtTx
	}
	return toSerialize, nil
}

type NullableSchemaZEntry struct {
	value *SchemaZEntry
	isSet bool
}

func (v NullableSchemaZEntry) Get() *SchemaZEntry {
	return v.value
}

func (v *NullableSchemaZEntry) Set(val *SchemaZEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaZEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaZEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaZEntry(val *SchemaZEntry) *NullableSchemaZEntry {
	return &NullableSchemaZEntry{value: val, isSet: true}
}

func (v NullableSchemaZEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaZEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


