/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
	"fmt"
)

// StatusCode the model 'StatusCode'
type StatusCode string

// List of StatusCode
const (
	SUCCESS StatusCode = "SUCCESS"
	UPDATED StatusCode = "UPDATED"
	INSERTED StatusCode = "INSERTED"
	ALREADY_EXISTS StatusCode = "ALREADY_EXISTS"
	ERROR StatusCode = "ERROR"
	MISSING_INDEX_KEYS StatusCode = "MISSING_INDEX_KEYS"
	NOT_FOUND StatusCode = "NOT_FOUND"
)

// All allowed values of StatusCode enum
var AllowedStatusCodeEnumValues = []StatusCode{
	"SUCCESS",
	"UPDATED",
	"INSERTED",
	"ALREADY_EXISTS",
	"ERROR",
	"MISSING_INDEX_KEYS",
	"NOT_FOUND",
}

func (v *StatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusCode(value)
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusCode", value)
}

// NewStatusCodeFromValue returns a pointer to a valid StatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusCodeFromValue(v string) (*StatusCode, error) {
	ev := StatusCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusCode: valid values are %v", v, AllowedStatusCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusCode) IsValid() bool {
	for _, existing := range AllowedStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusCode value
func (v StatusCode) Ptr() *StatusCode {
	return &v
}

type NullableStatusCode struct {
	value *StatusCode
	isSet bool
}

func (v NullableStatusCode) Get() *StatusCode {
	return v.value
}

func (v *NullableStatusCode) Set(val *StatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusCode(val *StatusCode) *NullableStatusCode {
	return &NullableStatusCode{value: val, isSet: true}
}

func (v NullableStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

