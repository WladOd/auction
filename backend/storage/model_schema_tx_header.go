/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaTxHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaTxHeader{}

// SchemaTxHeader Transaction header
type SchemaTxHeader struct {
	// Transaction ID
	Id *string `json:"id,omitempty"`
	// State value (Accumulative Hash - Alh) of the previous transaction
	PrevAlh *string `json:"prevAlh,omitempty"`
	// Unix timestamp of the transaction (in seconds)
	Ts *string `json:"ts,omitempty"`
	// Number of entries in a transaction
	Nentries *int32 `json:"nentries,omitempty"`
	// Entries Hash - cumulative hash of all entries in the transaction
	EH *string `json:"eH,omitempty"`
	// Binary linking tree transaction ID (ID of last transaction already in the main Merkle Tree)
	BlTxId *string `json:"blTxId,omitempty"`
	// Binary linking tree root (Root hash of the Merkle Tree)
	BlRoot *string `json:"blRoot,omitempty"`
	// Header version
	Version *int32 `json:"version,omitempty"`
	Metadata *SchemaTxMetadata `json:"metadata,omitempty"`
}

// NewSchemaTxHeader instantiates a new SchemaTxHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaTxHeader() *SchemaTxHeader {
	this := SchemaTxHeader{}
	return &this
}

// NewSchemaTxHeaderWithDefaults instantiates a new SchemaTxHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaTxHeaderWithDefaults() *SchemaTxHeader {
	this := SchemaTxHeader{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaTxHeader) SetId(v string) {
	o.Id = &v
}

// GetPrevAlh returns the PrevAlh field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetPrevAlh() string {
	if o == nil || IsNil(o.PrevAlh) {
		var ret string
		return ret
	}
	return *o.PrevAlh
}

// GetPrevAlhOk returns a tuple with the PrevAlh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetPrevAlhOk() (*string, bool) {
	if o == nil || IsNil(o.PrevAlh) {
		return nil, false
	}
	return o.PrevAlh, true
}

// HasPrevAlh returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasPrevAlh() bool {
	if o != nil && !IsNil(o.PrevAlh) {
		return true
	}

	return false
}

// SetPrevAlh gets a reference to the given string and assigns it to the PrevAlh field.
func (o *SchemaTxHeader) SetPrevAlh(v string) {
	o.PrevAlh = &v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetTs() string {
	if o == nil || IsNil(o.Ts) {
		var ret string
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetTsOk() (*string, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given string and assigns it to the Ts field.
func (o *SchemaTxHeader) SetTs(v string) {
	o.Ts = &v
}

// GetNentries returns the Nentries field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetNentries() int32 {
	if o == nil || IsNil(o.Nentries) {
		var ret int32
		return ret
	}
	return *o.Nentries
}

// GetNentriesOk returns a tuple with the Nentries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetNentriesOk() (*int32, bool) {
	if o == nil || IsNil(o.Nentries) {
		return nil, false
	}
	return o.Nentries, true
}

// HasNentries returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasNentries() bool {
	if o != nil && !IsNil(o.Nentries) {
		return true
	}

	return false
}

// SetNentries gets a reference to the given int32 and assigns it to the Nentries field.
func (o *SchemaTxHeader) SetNentries(v int32) {
	o.Nentries = &v
}

// GetEH returns the EH field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetEH() string {
	if o == nil || IsNil(o.EH) {
		var ret string
		return ret
	}
	return *o.EH
}

// GetEHOk returns a tuple with the EH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetEHOk() (*string, bool) {
	if o == nil || IsNil(o.EH) {
		return nil, false
	}
	return o.EH, true
}

// HasEH returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasEH() bool {
	if o != nil && !IsNil(o.EH) {
		return true
	}

	return false
}

// SetEH gets a reference to the given string and assigns it to the EH field.
func (o *SchemaTxHeader) SetEH(v string) {
	o.EH = &v
}

// GetBlTxId returns the BlTxId field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetBlTxId() string {
	if o == nil || IsNil(o.BlTxId) {
		var ret string
		return ret
	}
	return *o.BlTxId
}

// GetBlTxIdOk returns a tuple with the BlTxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetBlTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlTxId) {
		return nil, false
	}
	return o.BlTxId, true
}

// HasBlTxId returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasBlTxId() bool {
	if o != nil && !IsNil(o.BlTxId) {
		return true
	}

	return false
}

// SetBlTxId gets a reference to the given string and assigns it to the BlTxId field.
func (o *SchemaTxHeader) SetBlTxId(v string) {
	o.BlTxId = &v
}

// GetBlRoot returns the BlRoot field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetBlRoot() string {
	if o == nil || IsNil(o.BlRoot) {
		var ret string
		return ret
	}
	return *o.BlRoot
}

// GetBlRootOk returns a tuple with the BlRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetBlRootOk() (*string, bool) {
	if o == nil || IsNil(o.BlRoot) {
		return nil, false
	}
	return o.BlRoot, true
}

// HasBlRoot returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasBlRoot() bool {
	if o != nil && !IsNil(o.BlRoot) {
		return true
	}

	return false
}

// SetBlRoot gets a reference to the given string and assigns it to the BlRoot field.
func (o *SchemaTxHeader) SetBlRoot(v string) {
	o.BlRoot = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *SchemaTxHeader) SetVersion(v int32) {
	o.Version = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SchemaTxHeader) GetMetadata() SchemaTxMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SchemaTxMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTxHeader) GetMetadataOk() (*SchemaTxMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SchemaTxHeader) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SchemaTxMetadata and assigns it to the Metadata field.
func (o *SchemaTxHeader) SetMetadata(v SchemaTxMetadata) {
	o.Metadata = &v
}

func (o SchemaTxHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaTxHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PrevAlh) {
		toSerialize["prevAlh"] = o.PrevAlh
	}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	if !IsNil(o.Nentries) {
		toSerialize["nentries"] = o.Nentries
	}
	if !IsNil(o.EH) {
		toSerialize["eH"] = o.EH
	}
	if !IsNil(o.BlTxId) {
		toSerialize["blTxId"] = o.BlTxId
	}
	if !IsNil(o.BlRoot) {
		toSerialize["blRoot"] = o.BlRoot
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableSchemaTxHeader struct {
	value *SchemaTxHeader
	isSet bool
}

func (v NullableSchemaTxHeader) Get() *SchemaTxHeader {
	return v.value
}

func (v *NullableSchemaTxHeader) Set(val *SchemaTxHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaTxHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaTxHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaTxHeader(val *SchemaTxHeader) *NullableSchemaTxHeader {
	return &NullableSchemaTxHeader{value: val, isSet: true}
}

func (v NullableSchemaTxHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaTxHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


