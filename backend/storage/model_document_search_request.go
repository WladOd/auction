/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the DocumentSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentSearchRequest{}

// DocumentSearchRequest struct for DocumentSearchRequest
type DocumentSearchRequest struct {
	Page int32 `json:"page"`
	PerPage int32 `json:"perPage"`
	SearchId *string `json:"searchId,omitempty"`
	KeepOpen *bool `json:"keepOpen,omitempty"`
	Query *Query `json:"query,omitempty"`
}

// NewDocumentSearchRequest instantiates a new DocumentSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSearchRequest(page int32, perPage int32) *DocumentSearchRequest {
	this := DocumentSearchRequest{}
	this.Page = page
	this.PerPage = perPage
	return &this
}

// NewDocumentSearchRequestWithDefaults instantiates a new DocumentSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSearchRequestWithDefaults() *DocumentSearchRequest {
	this := DocumentSearchRequest{}
	return &this
}

// GetPage returns the Page field value
func (o *DocumentSearchRequest) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *DocumentSearchRequest) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *DocumentSearchRequest) SetPage(v int32) {
	o.Page = v
}

// GetPerPage returns the PerPage field value
func (o *DocumentSearchRequest) GetPerPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PerPage
}

// GetPerPageOk returns a tuple with the PerPage field value
// and a boolean to check if the value has been set.
func (o *DocumentSearchRequest) GetPerPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerPage, true
}

// SetPerPage sets field value
func (o *DocumentSearchRequest) SetPerPage(v int32) {
	o.PerPage = v
}

// GetSearchId returns the SearchId field value if set, zero value otherwise.
func (o *DocumentSearchRequest) GetSearchId() string {
	if o == nil || IsNil(o.SearchId) {
		var ret string
		return ret
	}
	return *o.SearchId
}

// GetSearchIdOk returns a tuple with the SearchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchRequest) GetSearchIdOk() (*string, bool) {
	if o == nil || IsNil(o.SearchId) {
		return nil, false
	}
	return o.SearchId, true
}

// HasSearchId returns a boolean if a field has been set.
func (o *DocumentSearchRequest) HasSearchId() bool {
	if o != nil && !IsNil(o.SearchId) {
		return true
	}

	return false
}

// SetSearchId gets a reference to the given string and assigns it to the SearchId field.
func (o *DocumentSearchRequest) SetSearchId(v string) {
	o.SearchId = &v
}

// GetKeepOpen returns the KeepOpen field value if set, zero value otherwise.
func (o *DocumentSearchRequest) GetKeepOpen() bool {
	if o == nil || IsNil(o.KeepOpen) {
		var ret bool
		return ret
	}
	return *o.KeepOpen
}

// GetKeepOpenOk returns a tuple with the KeepOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchRequest) GetKeepOpenOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepOpen) {
		return nil, false
	}
	return o.KeepOpen, true
}

// HasKeepOpen returns a boolean if a field has been set.
func (o *DocumentSearchRequest) HasKeepOpen() bool {
	if o != nil && !IsNil(o.KeepOpen) {
		return true
	}

	return false
}

// SetKeepOpen gets a reference to the given bool and assigns it to the KeepOpen field.
func (o *DocumentSearchRequest) SetKeepOpen(v bool) {
	o.KeepOpen = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *DocumentSearchRequest) GetQuery() Query {
	if o == nil || IsNil(o.Query) {
		var ret Query
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchRequest) GetQueryOk() (*Query, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *DocumentSearchRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given Query and assigns it to the Query field.
func (o *DocumentSearchRequest) SetQuery(v Query) {
	o.Query = &v
}

func (o DocumentSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["page"] = o.Page
	toSerialize["perPage"] = o.PerPage
	if !IsNil(o.SearchId) {
		toSerialize["searchId"] = o.SearchId
	}
	if !IsNil(o.KeepOpen) {
		toSerialize["keepOpen"] = o.KeepOpen
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableDocumentSearchRequest struct {
	value *DocumentSearchRequest
	isSet bool
}

func (v NullableDocumentSearchRequest) Get() *DocumentSearchRequest {
	return v.value
}

func (v *NullableDocumentSearchRequest) Set(val *DocumentSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSearchRequest(val *DocumentSearchRequest) *NullableDocumentSearchRequest {
	return &NullableDocumentSearchRequest{value: val, isSet: true}
}

func (v NullableDocumentSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


