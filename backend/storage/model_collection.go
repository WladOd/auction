/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the Collection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Collection{}

// Collection struct for Collection
type Collection struct {
	Name string `json:"name"`
	IdFieldName string `json:"idFieldName"`
	Fields []Field `json:"fields"`
	Indexes []Index `json:"indexes"`
}

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection(name string, idFieldName string, fields []Field, indexes []Index) *Collection {
	this := Collection{}
	this.Name = name
	this.IdFieldName = idFieldName
	this.Fields = fields
	this.Indexes = indexes
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetName returns the Name field value
func (o *Collection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Collection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Collection) SetName(v string) {
	o.Name = v
}

// GetIdFieldName returns the IdFieldName field value
func (o *Collection) GetIdFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdFieldName
}

// GetIdFieldNameOk returns a tuple with the IdFieldName field value
// and a boolean to check if the value has been set.
func (o *Collection) GetIdFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdFieldName, true
}

// SetIdFieldName sets field value
func (o *Collection) SetIdFieldName(v string) {
	o.IdFieldName = v
}

// GetFields returns the Fields field value
func (o *Collection) GetFields() []Field {
	if o == nil {
		var ret []Field
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *Collection) GetFieldsOk() ([]Field, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *Collection) SetFields(v []Field) {
	o.Fields = v
}

// GetIndexes returns the Indexes field value
func (o *Collection) GetIndexes() []Index {
	if o == nil {
		var ret []Index
		return ret
	}

	return o.Indexes
}

// GetIndexesOk returns a tuple with the Indexes field value
// and a boolean to check if the value has been set.
func (o *Collection) GetIndexesOk() ([]Index, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indexes, true
}

// SetIndexes sets field value
func (o *Collection) SetIndexes(v []Index) {
	o.Indexes = v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Collection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["idFieldName"] = o.IdFieldName
	toSerialize["fields"] = o.Fields
	toSerialize["indexes"] = o.Indexes
	return toSerialize, nil
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


