/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaKVMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaKVMetadata{}

// SchemaKVMetadata struct for SchemaKVMetadata
type SchemaKVMetadata struct {
	// True if this entry denotes a logical deletion
	Deleted *bool `json:"deleted,omitempty"`
	Expiration *SchemaExpiration `json:"expiration,omitempty"`
	// If set to true, this entry will not be indexed and will only be accessed through GetAt calls
	NonIndexable *bool `json:"nonIndexable,omitempty"`
}

// NewSchemaKVMetadata instantiates a new SchemaKVMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaKVMetadata() *SchemaKVMetadata {
	this := SchemaKVMetadata{}
	return &this
}

// NewSchemaKVMetadataWithDefaults instantiates a new SchemaKVMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaKVMetadataWithDefaults() *SchemaKVMetadata {
	this := SchemaKVMetadata{}
	return &this
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *SchemaKVMetadata) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaKVMetadata) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *SchemaKVMetadata) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *SchemaKVMetadata) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *SchemaKVMetadata) GetExpiration() SchemaExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret SchemaExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaKVMetadata) GetExpirationOk() (*SchemaExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *SchemaKVMetadata) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given SchemaExpiration and assigns it to the Expiration field.
func (o *SchemaKVMetadata) SetExpiration(v SchemaExpiration) {
	o.Expiration = &v
}

// GetNonIndexable returns the NonIndexable field value if set, zero value otherwise.
func (o *SchemaKVMetadata) GetNonIndexable() bool {
	if o == nil || IsNil(o.NonIndexable) {
		var ret bool
		return ret
	}
	return *o.NonIndexable
}

// GetNonIndexableOk returns a tuple with the NonIndexable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaKVMetadata) GetNonIndexableOk() (*bool, bool) {
	if o == nil || IsNil(o.NonIndexable) {
		return nil, false
	}
	return o.NonIndexable, true
}

// HasNonIndexable returns a boolean if a field has been set.
func (o *SchemaKVMetadata) HasNonIndexable() bool {
	if o != nil && !IsNil(o.NonIndexable) {
		return true
	}

	return false
}

// SetNonIndexable gets a reference to the given bool and assigns it to the NonIndexable field.
func (o *SchemaKVMetadata) SetNonIndexable(v bool) {
	o.NonIndexable = &v
}

func (o SchemaKVMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaKVMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.NonIndexable) {
		toSerialize["nonIndexable"] = o.NonIndexable
	}
	return toSerialize, nil
}

type NullableSchemaKVMetadata struct {
	value *SchemaKVMetadata
	isSet bool
}

func (v NullableSchemaKVMetadata) Get() *SchemaKVMetadata {
	return v.value
}

func (v *NullableSchemaKVMetadata) Set(val *SchemaKVMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaKVMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaKVMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaKVMetadata(val *SchemaKVMetadata) *NullableSchemaKVMetadata {
	return &NullableSchemaKVMetadata{value: val, isSet: true}
}

func (v NullableSchemaKVMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaKVMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


