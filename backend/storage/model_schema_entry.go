/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaEntry{}

// SchemaEntry struct for SchemaEntry
type SchemaEntry struct {
	// Transaction id at which the target value was set (i.e. not the reference transaction id)
	Tx *string `json:"tx,omitempty"`
	// Key of the target value (i.e. not the reference entry)
	Key *string `json:"key,omitempty"`
	// Value
	Value *string `json:"value,omitempty"`
	ReferencedBy *SchemaReference `json:"referencedBy,omitempty"`
	Metadata *SchemaKVMetadata `json:"metadata,omitempty"`
	// If set to true, this entry has expired and the value is not retrieved
	Expired *bool `json:"expired,omitempty"`
	// Key's revision, in case of GetAt it will be 0
	Revision *string `json:"revision,omitempty"`
}

// NewSchemaEntry instantiates a new SchemaEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaEntry() *SchemaEntry {
	this := SchemaEntry{}
	return &this
}

// NewSchemaEntryWithDefaults instantiates a new SchemaEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaEntryWithDefaults() *SchemaEntry {
	this := SchemaEntry{}
	return &this
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *SchemaEntry) GetTx() string {
	if o == nil || IsNil(o.Tx) {
		var ret string
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetTxOk() (*string, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *SchemaEntry) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given string and assigns it to the Tx field.
func (o *SchemaEntry) SetTx(v string) {
	o.Tx = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SchemaEntry) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SchemaEntry) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SchemaEntry) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SchemaEntry) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SchemaEntry) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SchemaEntry) SetValue(v string) {
	o.Value = &v
}

// GetReferencedBy returns the ReferencedBy field value if set, zero value otherwise.
func (o *SchemaEntry) GetReferencedBy() SchemaReference {
	if o == nil || IsNil(o.ReferencedBy) {
		var ret SchemaReference
		return ret
	}
	return *o.ReferencedBy
}

// GetReferencedByOk returns a tuple with the ReferencedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetReferencedByOk() (*SchemaReference, bool) {
	if o == nil || IsNil(o.ReferencedBy) {
		return nil, false
	}
	return o.ReferencedBy, true
}

// HasReferencedBy returns a boolean if a field has been set.
func (o *SchemaEntry) HasReferencedBy() bool {
	if o != nil && !IsNil(o.ReferencedBy) {
		return true
	}

	return false
}

// SetReferencedBy gets a reference to the given SchemaReference and assigns it to the ReferencedBy field.
func (o *SchemaEntry) SetReferencedBy(v SchemaReference) {
	o.ReferencedBy = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SchemaEntry) GetMetadata() SchemaKVMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret SchemaKVMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetMetadataOk() (*SchemaKVMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SchemaEntry) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given SchemaKVMetadata and assigns it to the Metadata field.
func (o *SchemaEntry) SetMetadata(v SchemaKVMetadata) {
	o.Metadata = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *SchemaEntry) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *SchemaEntry) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *SchemaEntry) SetExpired(v bool) {
	o.Expired = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *SchemaEntry) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaEntry) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *SchemaEntry) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *SchemaEntry) SetRevision(v string) {
	o.Revision = &v
}

func (o SchemaEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ReferencedBy) {
		toSerialize["referencedBy"] = o.ReferencedBy
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	return toSerialize, nil
}

type NullableSchemaEntry struct {
	value *SchemaEntry
	isSet bool
}

func (v NullableSchemaEntry) Get() *SchemaEntry {
	return v.value
}

func (v *NullableSchemaEntry) Set(val *SchemaEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaEntry(val *SchemaEntry) *NullableSchemaEntry {
	return &NullableSchemaEntry{value: val, isSet: true}
}

func (v NullableSchemaEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


