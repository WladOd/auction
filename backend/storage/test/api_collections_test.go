/*
Immudb Cloud Service

Testing CollectionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package storage

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/WladOd/auction.git/storage"
)

func Test_storage_CollectionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CollectionsAPIService CollectionCreate", func(t *testing.T) {

		//t.Skip("skip test")  // remove to run test

		var ledger string
		var collection string

		httpRes, err := apiClient.CollectionsAPI.CollectionCreate(context.Background(), ledger, collection).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var collection string

		httpRes, err := apiClient.CollectionsAPI.CollectionDelete(context.Background(), ledger, collection).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var collection string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionGet(context.Background(), ledger, collection).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string
		var collection string

		httpRes, err := apiClient.CollectionsAPI.CollectionUpdate(context.Background(), ledger, collection).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CollectionsAPIService CollectionsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ledger string

		resp, httpRes, err := apiClient.CollectionsAPI.CollectionsList(context.Background(), ledger).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
