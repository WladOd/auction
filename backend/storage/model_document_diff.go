/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the DocumentDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentDiff{}

// DocumentDiff struct for DocumentDiff
type DocumentDiff struct {
	DiffIds string `json:"diffIds"`
	Diff map[string]interface{} `json:"diff"`
}

// NewDocumentDiff instantiates a new DocumentDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentDiff(diffIds string, diff map[string]interface{}) *DocumentDiff {
	this := DocumentDiff{}
	this.DiffIds = diffIds
	this.Diff = diff
	return &this
}

// NewDocumentDiffWithDefaults instantiates a new DocumentDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDiffWithDefaults() *DocumentDiff {
	this := DocumentDiff{}
	return &this
}

// GetDiffIds returns the DiffIds field value
func (o *DocumentDiff) GetDiffIds() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiffIds
}

// GetDiffIdsOk returns a tuple with the DiffIds field value
// and a boolean to check if the value has been set.
func (o *DocumentDiff) GetDiffIdsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiffIds, true
}

// SetDiffIds sets field value
func (o *DocumentDiff) SetDiffIds(v string) {
	o.DiffIds = v
}

// GetDiff returns the Diff field value
func (o *DocumentDiff) GetDiff() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Diff
}

// GetDiffOk returns a tuple with the Diff field value
// and a boolean to check if the value has been set.
func (o *DocumentDiff) GetDiffOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Diff, true
}

// SetDiff sets field value
func (o *DocumentDiff) SetDiff(v map[string]interface{}) {
	o.Diff = v
}

func (o DocumentDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diffIds"] = o.DiffIds
	toSerialize["diff"] = o.Diff
	return toSerialize, nil
}

type NullableDocumentDiff struct {
	value *DocumentDiff
	isSet bool
}

func (v NullableDocumentDiff) Get() *DocumentDiff {
	return v.value
}

func (v *NullableDocumentDiff) Set(val *DocumentDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentDiff(val *DocumentDiff) *NullableDocumentDiff {
	return &NullableDocumentDiff{value: val, isSet: true}
}

func (v NullableDocumentDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


