/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the ActionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionResult{}

// ActionResult struct for ActionResult
type ActionResult struct {
	Status StatusCode `json:"status"`
	Message string `json:"message"`
	// HTTP status code
	Code *int32 `json:"code,omitempty"`
}

// NewActionResult instantiates a new ActionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionResult(status StatusCode, message string) *ActionResult {
	this := ActionResult{}
	this.Status = status
	this.Message = message
	return &this
}

// NewActionResultWithDefaults instantiates a new ActionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResultWithDefaults() *ActionResult {
	this := ActionResult{}
	return &this
}

// GetStatus returns the Status field value
func (o *ActionResult) GetStatus() StatusCode {
	if o == nil {
		var ret StatusCode
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ActionResult) GetStatusOk() (*StatusCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ActionResult) SetStatus(v StatusCode) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *ActionResult) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ActionResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ActionResult) SetMessage(v string) {
	o.Message = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ActionResult) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResult) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ActionResult) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *ActionResult) SetCode(v int32) {
	o.Code = &v
}

func (o ActionResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["message"] = o.Message
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableActionResult struct {
	value *ActionResult
	isSet bool
}

func (v NullableActionResult) Get() *ActionResult {
	return v.value
}

func (v *NullableActionResult) Set(val *ActionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResult(val *ActionResult) *NullableActionResult {
	return &NullableActionResult{value: val, isSet: true}
}

func (v NullableActionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


