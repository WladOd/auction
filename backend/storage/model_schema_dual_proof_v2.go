/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaDualProofV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaDualProofV2{}

// SchemaDualProofV2 DualProofV2 contains inclusion and consistency proofs
type SchemaDualProofV2 struct {
	SourceTxHeader *SchemaTxHeader `json:"sourceTxHeader,omitempty"`
	TargetTxHeader *SchemaTxHeader `json:"targetTxHeader,omitempty"`
	// Inclusion proof of the source transaction hash in the main Merkle Tree
	InclusionProof []string `json:"inclusionProof,omitempty"`
	// Consistency proof between Merkle Trees in the source and target transactions
	ConsistencyProof []string `json:"consistencyProof,omitempty"`
}

// NewSchemaDualProofV2 instantiates a new SchemaDualProofV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDualProofV2() *SchemaDualProofV2 {
	this := SchemaDualProofV2{}
	return &this
}

// NewSchemaDualProofV2WithDefaults instantiates a new SchemaDualProofV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDualProofV2WithDefaults() *SchemaDualProofV2 {
	this := SchemaDualProofV2{}
	return &this
}

// GetSourceTxHeader returns the SourceTxHeader field value if set, zero value otherwise.
func (o *SchemaDualProofV2) GetSourceTxHeader() SchemaTxHeader {
	if o == nil || IsNil(o.SourceTxHeader) {
		var ret SchemaTxHeader
		return ret
	}
	return *o.SourceTxHeader
}

// GetSourceTxHeaderOk returns a tuple with the SourceTxHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDualProofV2) GetSourceTxHeaderOk() (*SchemaTxHeader, bool) {
	if o == nil || IsNil(o.SourceTxHeader) {
		return nil, false
	}
	return o.SourceTxHeader, true
}

// HasSourceTxHeader returns a boolean if a field has been set.
func (o *SchemaDualProofV2) HasSourceTxHeader() bool {
	if o != nil && !IsNil(o.SourceTxHeader) {
		return true
	}

	return false
}

// SetSourceTxHeader gets a reference to the given SchemaTxHeader and assigns it to the SourceTxHeader field.
func (o *SchemaDualProofV2) SetSourceTxHeader(v SchemaTxHeader) {
	o.SourceTxHeader = &v
}

// GetTargetTxHeader returns the TargetTxHeader field value if set, zero value otherwise.
func (o *SchemaDualProofV2) GetTargetTxHeader() SchemaTxHeader {
	if o == nil || IsNil(o.TargetTxHeader) {
		var ret SchemaTxHeader
		return ret
	}
	return *o.TargetTxHeader
}

// GetTargetTxHeaderOk returns a tuple with the TargetTxHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDualProofV2) GetTargetTxHeaderOk() (*SchemaTxHeader, bool) {
	if o == nil || IsNil(o.TargetTxHeader) {
		return nil, false
	}
	return o.TargetTxHeader, true
}

// HasTargetTxHeader returns a boolean if a field has been set.
func (o *SchemaDualProofV2) HasTargetTxHeader() bool {
	if o != nil && !IsNil(o.TargetTxHeader) {
		return true
	}

	return false
}

// SetTargetTxHeader gets a reference to the given SchemaTxHeader and assigns it to the TargetTxHeader field.
func (o *SchemaDualProofV2) SetTargetTxHeader(v SchemaTxHeader) {
	o.TargetTxHeader = &v
}

// GetInclusionProof returns the InclusionProof field value if set, zero value otherwise.
func (o *SchemaDualProofV2) GetInclusionProof() []string {
	if o == nil || IsNil(o.InclusionProof) {
		var ret []string
		return ret
	}
	return o.InclusionProof
}

// GetInclusionProofOk returns a tuple with the InclusionProof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDualProofV2) GetInclusionProofOk() ([]string, bool) {
	if o == nil || IsNil(o.InclusionProof) {
		return nil, false
	}
	return o.InclusionProof, true
}

// HasInclusionProof returns a boolean if a field has been set.
func (o *SchemaDualProofV2) HasInclusionProof() bool {
	if o != nil && !IsNil(o.InclusionProof) {
		return true
	}

	return false
}

// SetInclusionProof gets a reference to the given []string and assigns it to the InclusionProof field.
func (o *SchemaDualProofV2) SetInclusionProof(v []string) {
	o.InclusionProof = v
}

// GetConsistencyProof returns the ConsistencyProof field value if set, zero value otherwise.
func (o *SchemaDualProofV2) GetConsistencyProof() []string {
	if o == nil || IsNil(o.ConsistencyProof) {
		var ret []string
		return ret
	}
	return o.ConsistencyProof
}

// GetConsistencyProofOk returns a tuple with the ConsistencyProof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDualProofV2) GetConsistencyProofOk() ([]string, bool) {
	if o == nil || IsNil(o.ConsistencyProof) {
		return nil, false
	}
	return o.ConsistencyProof, true
}

// HasConsistencyProof returns a boolean if a field has been set.
func (o *SchemaDualProofV2) HasConsistencyProof() bool {
	if o != nil && !IsNil(o.ConsistencyProof) {
		return true
	}

	return false
}

// SetConsistencyProof gets a reference to the given []string and assigns it to the ConsistencyProof field.
func (o *SchemaDualProofV2) SetConsistencyProof(v []string) {
	o.ConsistencyProof = v
}

func (o SchemaDualProofV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaDualProofV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceTxHeader) {
		toSerialize["sourceTxHeader"] = o.SourceTxHeader
	}
	if !IsNil(o.TargetTxHeader) {
		toSerialize["targetTxHeader"] = o.TargetTxHeader
	}
	if !IsNil(o.InclusionProof) {
		toSerialize["inclusionProof"] = o.InclusionProof
	}
	if !IsNil(o.ConsistencyProof) {
		toSerialize["consistencyProof"] = o.ConsistencyProof
	}
	return toSerialize, nil
}

type NullableSchemaDualProofV2 struct {
	value *SchemaDualProofV2
	isSet bool
}

func (v NullableSchemaDualProofV2) Get() *SchemaDualProofV2 {
	return v.value
}

func (v *NullableSchemaDualProofV2) Set(val *SchemaDualProofV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDualProofV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDualProofV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDualProofV2(val *SchemaDualProofV2) *NullableSchemaDualProofV2 {
	return &NullableSchemaDualProofV2{value: val, isSet: true}
}

func (v NullableSchemaDualProofV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDualProofV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


