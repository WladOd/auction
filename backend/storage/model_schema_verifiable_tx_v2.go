/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaVerifiableTxV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaVerifiableTxV2{}

// SchemaVerifiableTxV2 struct for SchemaVerifiableTxV2
type SchemaVerifiableTxV2 struct {
	Tx *SchemaTx `json:"tx,omitempty"`
	DualProof *SchemaDualProofV2 `json:"dualProof,omitempty"`
	Signature *SchemaSignature `json:"signature,omitempty"`
}

// NewSchemaVerifiableTxV2 instantiates a new SchemaVerifiableTxV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaVerifiableTxV2() *SchemaVerifiableTxV2 {
	this := SchemaVerifiableTxV2{}
	return &this
}

// NewSchemaVerifiableTxV2WithDefaults instantiates a new SchemaVerifiableTxV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaVerifiableTxV2WithDefaults() *SchemaVerifiableTxV2 {
	this := SchemaVerifiableTxV2{}
	return &this
}

// GetTx returns the Tx field value if set, zero value otherwise.
func (o *SchemaVerifiableTxV2) GetTx() SchemaTx {
	if o == nil || IsNil(o.Tx) {
		var ret SchemaTx
		return ret
	}
	return *o.Tx
}

// GetTxOk returns a tuple with the Tx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVerifiableTxV2) GetTxOk() (*SchemaTx, bool) {
	if o == nil || IsNil(o.Tx) {
		return nil, false
	}
	return o.Tx, true
}

// HasTx returns a boolean if a field has been set.
func (o *SchemaVerifiableTxV2) HasTx() bool {
	if o != nil && !IsNil(o.Tx) {
		return true
	}

	return false
}

// SetTx gets a reference to the given SchemaTx and assigns it to the Tx field.
func (o *SchemaVerifiableTxV2) SetTx(v SchemaTx) {
	o.Tx = &v
}

// GetDualProof returns the DualProof field value if set, zero value otherwise.
func (o *SchemaVerifiableTxV2) GetDualProof() SchemaDualProofV2 {
	if o == nil || IsNil(o.DualProof) {
		var ret SchemaDualProofV2
		return ret
	}
	return *o.DualProof
}

// GetDualProofOk returns a tuple with the DualProof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVerifiableTxV2) GetDualProofOk() (*SchemaDualProofV2, bool) {
	if o == nil || IsNil(o.DualProof) {
		return nil, false
	}
	return o.DualProof, true
}

// HasDualProof returns a boolean if a field has been set.
func (o *SchemaVerifiableTxV2) HasDualProof() bool {
	if o != nil && !IsNil(o.DualProof) {
		return true
	}

	return false
}

// SetDualProof gets a reference to the given SchemaDualProofV2 and assigns it to the DualProof field.
func (o *SchemaVerifiableTxV2) SetDualProof(v SchemaDualProofV2) {
	o.DualProof = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *SchemaVerifiableTxV2) GetSignature() SchemaSignature {
	if o == nil || IsNil(o.Signature) {
		var ret SchemaSignature
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaVerifiableTxV2) GetSignatureOk() (*SchemaSignature, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *SchemaVerifiableTxV2) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given SchemaSignature and assigns it to the Signature field.
func (o *SchemaVerifiableTxV2) SetSignature(v SchemaSignature) {
	o.Signature = &v
}

func (o SchemaVerifiableTxV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaVerifiableTxV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tx) {
		toSerialize["tx"] = o.Tx
	}
	if !IsNil(o.DualProof) {
		toSerialize["dualProof"] = o.DualProof
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	return toSerialize, nil
}

type NullableSchemaVerifiableTxV2 struct {
	value *SchemaVerifiableTxV2
	isSet bool
}

func (v NullableSchemaVerifiableTxV2) Get() *SchemaVerifiableTxV2 {
	return v.value
}

func (v *NullableSchemaVerifiableTxV2) Set(val *SchemaVerifiableTxV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaVerifiableTxV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaVerifiableTxV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaVerifiableTxV2(val *SchemaVerifiableTxV2) *NullableSchemaVerifiableTxV2 {
	return &NullableSchemaVerifiableTxV2{value: val, isSet: true}
}

func (v NullableSchemaVerifiableTxV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaVerifiableTxV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


