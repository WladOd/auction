/*
Immudb Cloud Service

Specification of API to interact with Immudb Cloud Service.

API version: 1.0.0
Contact: contact@codenotary.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package storage

import (
	"encoding/json"
)

// checks if the SchemaImmutableState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaImmutableState{}

// SchemaImmutableState struct for SchemaImmutableState
type SchemaImmutableState struct {
	// The db name
	Db *string `json:"db,omitempty"`
	// Id of the most recent transaction
	TxId *string `json:"txId,omitempty"`
	// State of the most recent transaction
	TxHash *string `json:"txHash,omitempty"`
	Signature *SchemaSignature `json:"signature,omitempty"`
	// Id of the most recent precommitted transaction
	PrecommittedTxId *string `json:"precommittedTxId,omitempty"`
	// State of the most recent precommitted transaction
	PrecommittedTxHash *string `json:"precommittedTxHash,omitempty"`
}

// NewSchemaImmutableState instantiates a new SchemaImmutableState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaImmutableState() *SchemaImmutableState {
	this := SchemaImmutableState{}
	return &this
}

// NewSchemaImmutableStateWithDefaults instantiates a new SchemaImmutableState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaImmutableStateWithDefaults() *SchemaImmutableState {
	this := SchemaImmutableState{}
	return &this
}

// GetDb returns the Db field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetDb() string {
	if o == nil || IsNil(o.Db) {
		var ret string
		return ret
	}
	return *o.Db
}

// GetDbOk returns a tuple with the Db field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetDbOk() (*string, bool) {
	if o == nil || IsNil(o.Db) {
		return nil, false
	}
	return o.Db, true
}

// HasDb returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasDb() bool {
	if o != nil && !IsNil(o.Db) {
		return true
	}

	return false
}

// SetDb gets a reference to the given string and assigns it to the Db field.
func (o *SchemaImmutableState) SetDb(v string) {
	o.Db = &v
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetTxId() string {
	if o == nil || IsNil(o.TxId) {
		var ret string
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.TxId) {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasTxId() bool {
	if o != nil && !IsNil(o.TxId) {
		return true
	}

	return false
}

// SetTxId gets a reference to the given string and assigns it to the TxId field.
func (o *SchemaImmutableState) SetTxId(v string) {
	o.TxId = &v
}

// GetTxHash returns the TxHash field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetTxHash() string {
	if o == nil || IsNil(o.TxHash) {
		var ret string
		return ret
	}
	return *o.TxHash
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.TxHash) {
		return nil, false
	}
	return o.TxHash, true
}

// HasTxHash returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasTxHash() bool {
	if o != nil && !IsNil(o.TxHash) {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given string and assigns it to the TxHash field.
func (o *SchemaImmutableState) SetTxHash(v string) {
	o.TxHash = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetSignature() SchemaSignature {
	if o == nil || IsNil(o.Signature) {
		var ret SchemaSignature
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetSignatureOk() (*SchemaSignature, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given SchemaSignature and assigns it to the Signature field.
func (o *SchemaImmutableState) SetSignature(v SchemaSignature) {
	o.Signature = &v
}

// GetPrecommittedTxId returns the PrecommittedTxId field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetPrecommittedTxId() string {
	if o == nil || IsNil(o.PrecommittedTxId) {
		var ret string
		return ret
	}
	return *o.PrecommittedTxId
}

// GetPrecommittedTxIdOk returns a tuple with the PrecommittedTxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetPrecommittedTxIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrecommittedTxId) {
		return nil, false
	}
	return o.PrecommittedTxId, true
}

// HasPrecommittedTxId returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasPrecommittedTxId() bool {
	if o != nil && !IsNil(o.PrecommittedTxId) {
		return true
	}

	return false
}

// SetPrecommittedTxId gets a reference to the given string and assigns it to the PrecommittedTxId field.
func (o *SchemaImmutableState) SetPrecommittedTxId(v string) {
	o.PrecommittedTxId = &v
}

// GetPrecommittedTxHash returns the PrecommittedTxHash field value if set, zero value otherwise.
func (o *SchemaImmutableState) GetPrecommittedTxHash() string {
	if o == nil || IsNil(o.PrecommittedTxHash) {
		var ret string
		return ret
	}
	return *o.PrecommittedTxHash
}

// GetPrecommittedTxHashOk returns a tuple with the PrecommittedTxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaImmutableState) GetPrecommittedTxHashOk() (*string, bool) {
	if o == nil || IsNil(o.PrecommittedTxHash) {
		return nil, false
	}
	return o.PrecommittedTxHash, true
}

// HasPrecommittedTxHash returns a boolean if a field has been set.
func (o *SchemaImmutableState) HasPrecommittedTxHash() bool {
	if o != nil && !IsNil(o.PrecommittedTxHash) {
		return true
	}

	return false
}

// SetPrecommittedTxHash gets a reference to the given string and assigns it to the PrecommittedTxHash field.
func (o *SchemaImmutableState) SetPrecommittedTxHash(v string) {
	o.PrecommittedTxHash = &v
}

func (o SchemaImmutableState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaImmutableState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Db) {
		toSerialize["db"] = o.Db
	}
	if !IsNil(o.TxId) {
		toSerialize["txId"] = o.TxId
	}
	if !IsNil(o.TxHash) {
		toSerialize["txHash"] = o.TxHash
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.PrecommittedTxId) {
		toSerialize["precommittedTxId"] = o.PrecommittedTxId
	}
	if !IsNil(o.PrecommittedTxHash) {
		toSerialize["precommittedTxHash"] = o.PrecommittedTxHash
	}
	return toSerialize, nil
}

type NullableSchemaImmutableState struct {
	value *SchemaImmutableState
	isSet bool
}

func (v NullableSchemaImmutableState) Get() *SchemaImmutableState {
	return v.value
}

func (v *NullableSchemaImmutableState) Set(val *SchemaImmutableState) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaImmutableState) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaImmutableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaImmutableState(val *SchemaImmutableState) *NullableSchemaImmutableState {
	return &NullableSchemaImmutableState{value: val, isSet: true}
}

func (v NullableSchemaImmutableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaImmutableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


